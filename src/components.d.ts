/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppComponent {
    }
    interface CalculatorDisplay {
        "value": string;
    }
    interface CalculatorLog {
        "history": { operation: string, result: string }[];
        "visiblity": boolean;
    }
    interface CalculatorPanel {
    }
}
export interface CalculatorLogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalculatorLogElement;
}
export interface CalculatorPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalculatorPanelElement;
}
declare global {
    interface HTMLAppComponentElement extends Components.AppComponent, HTMLStencilElement {
    }
    var HTMLAppComponentElement: {
        prototype: HTMLAppComponentElement;
        new (): HTMLAppComponentElement;
    };
    interface HTMLCalculatorDisplayElement extends Components.CalculatorDisplay, HTMLStencilElement {
    }
    var HTMLCalculatorDisplayElement: {
        prototype: HTMLCalculatorDisplayElement;
        new (): HTMLCalculatorDisplayElement;
    };
    interface HTMLCalculatorLogElementEventMap {
        "logBtnClicked": boolean;
    }
    interface HTMLCalculatorLogElement extends Components.CalculatorLog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalculatorLogElementEventMap>(type: K, listener: (this: HTMLCalculatorLogElement, ev: CalculatorLogCustomEvent<HTMLCalculatorLogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalculatorLogElementEventMap>(type: K, listener: (this: HTMLCalculatorLogElement, ev: CalculatorLogCustomEvent<HTMLCalculatorLogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalculatorLogElement: {
        prototype: HTMLCalculatorLogElement;
        new (): HTMLCalculatorLogElement;
    };
    interface HTMLCalculatorPanelElementEventMap {
        "numberBtnClicked": string;
    }
    interface HTMLCalculatorPanelElement extends Components.CalculatorPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalculatorPanelElementEventMap>(type: K, listener: (this: HTMLCalculatorPanelElement, ev: CalculatorPanelCustomEvent<HTMLCalculatorPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalculatorPanelElementEventMap>(type: K, listener: (this: HTMLCalculatorPanelElement, ev: CalculatorPanelCustomEvent<HTMLCalculatorPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalculatorPanelElement: {
        prototype: HTMLCalculatorPanelElement;
        new (): HTMLCalculatorPanelElement;
    };
    interface HTMLElementTagNameMap {
        "app-component": HTMLAppComponentElement;
        "calculator-display": HTMLCalculatorDisplayElement;
        "calculator-log": HTMLCalculatorLogElement;
        "calculator-panel": HTMLCalculatorPanelElement;
    }
}
declare namespace LocalJSX {
    interface AppComponent {
    }
    interface CalculatorDisplay {
        "value"?: string;
    }
    interface CalculatorLog {
        "history"?: { operation: string, result: string }[];
        "onLogBtnClicked"?: (event: CalculatorLogCustomEvent<boolean>) => void;
        "visiblity"?: boolean;
    }
    interface CalculatorPanel {
        "onNumberBtnClicked"?: (event: CalculatorPanelCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "app-component": AppComponent;
        "calculator-display": CalculatorDisplay;
        "calculator-log": CalculatorLog;
        "calculator-panel": CalculatorPanel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-component": LocalJSX.AppComponent & JSXBase.HTMLAttributes<HTMLAppComponentElement>;
            "calculator-display": LocalJSX.CalculatorDisplay & JSXBase.HTMLAttributes<HTMLCalculatorDisplayElement>;
            "calculator-log": LocalJSX.CalculatorLog & JSXBase.HTMLAttributes<HTMLCalculatorLogElement>;
            "calculator-panel": LocalJSX.CalculatorPanel & JSXBase.HTMLAttributes<HTMLCalculatorPanelElement>;
        }
    }
}
